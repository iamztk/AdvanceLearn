1、数据库的三大点：
	a、索引
	b、事务
	c、锁
	
	
2、索引
	a、索引的作用？
		实现快速检索，而实现快速检索的本质是数据结构。
		
	b、Mysql底层数据结构选型:
		1、哈希表（Hash）
			哈希表是用来做数据检索的有效利器。 哈希表采用的是哈希算法。
		
			a、哈希算法
				也叫三列算法，就是把任意的key通过哈希函数转换成固定的key的地址，通过这个地址进行具体数据存取的数据结构。
				
				优点：
					查询数据特别快，只需要经过一次计算，就能准确找到对应的key的地址，从而取出数据。
				缺点：
					1、由于是将key通过哈希函数转换成固定的地址，这个转换并不是对不同的数据转换不同的结果，有可能会导致
				不同的数据转换出一样的地址。这就是哈希冲突。所以需要解决该冲突，常见方式是通过链表进行解决。				
					链地址法解决哈希冲突。计算出来的哈希值一样，则用链表存放不同的数据值。
					
					2、哈希表的数据结构只适合在精准查询时才高效,此时的时间复杂度为O(1)。
					   针对范围查询，哈表表就只能全数据检索了，此时时间复杂度就变味了O(n)
					   
		2、二叉树（BST）Binary Search Tree
			普通的二叉树，相当于是二分法进行查找，时间复杂度为O(logn)。
			但是普通的二叉树只是存取数据，在树的结构上很呆板，不会有树结构的自主变化。
			极端情况下二叉树的结构会转变为：线性链表，此时时间复杂度转化为O(n)。
			
		3、红黑树
			红黑树是一种能通过自旋和变色维持五大特性的二叉树。
			同时，因为会去维持特性，所以不会出现如二叉树那样的极端情况。
			但是相应的在红黑树中，可能会存在的极端情况为：有部分节点会比其他节点长，但是不会长2倍以上，长的长度维持在1倍以内。
			
			
		4、AVL二叉树（平衡二叉树）
			基于二叉树的缺点，在极端情况下会转换位线性链表，所以提出了平衡二叉树。
			基于树节点的自动旋转和调整，平衡整颗树，以保证，叶子节点之间的高度差不会超过1。
			
			优点：
				a、性能非常不错，是O(logn)的时间复杂度，不存在极端的低效查找情况。
				b、可以实现范围查找、数据排序
			
			缺点：
				节点存储的关键字只有一个，每次磁盘与内存进行交互IO操作时，只有一条数据信息。
				而数据存于磁盘中是以页的方式存储的，所以1B与1KB其实没什么区别，都是一次读进内存。
				所以，当存在千万级的数据时，一棵AVL树高度大概在20多，相当于是要交互20多次，存在很大的浪费。
				
				所以要尽可能的将磁盘与内存的IO次数。
				
		
		5、B-Tree（B树）
			是一种多路平衡查找树。
			节点存储的关键字可以有多个。
			一个m阶的B树，则节点的孩子数最多为m个，即节点内的关键字树为m-1个，最少为m/2个。
			
			优点：
				节点能存储多个关键字，能有效降低IO次数。提交查询速度。
				
		6、B+树
			也是一种多路平衡查找树。
			与B树基本一致。
			
			与B树的不同点：
				1、B树的非叶子节点是存储数据的。而B+树的非叶子节点是不存储任何数据的，所有的数据都存储在叶子节点中。
					因为B+数的非叶子节点不存储实质性数据，所以每个节点能存放更多的索引值，
				所以能有效的降低树的高度，从而提高查询速度。
				2、B+树的非叶子节点用一个链表串联了起来，便于范围查找。
			
			